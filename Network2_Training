{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Final Project -Part 2_v2.ipynb","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"vnnKfVZB0aL-"},"source":["# ECBM 4040 Final Project - Group ERP1 Notebook 2 v2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zpo6tDZt0Qwc","executionInfo":{"status":"ok","timestamp":1608408096933,"user_tz":300,"elapsed":1745,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"6e3ee01c-3998-4a71-8ea8-29f28965a3aa"},"source":["# IF USING GOOGLE DRIVE: \n","from google.colab import drive\n","drive.mount('/content/drive/', force_remount=True)\n","path = './drive/MyDrive/E4040_Final_Project/tiny-imagenet-200'\n","!cp -r ./drive/MyDrive/E4040_Final_Project/utils .\n","# !cp -r ./drive/MyDrive/E4040\\ Final\\ Project/utils ."],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NhTjyKrrfYbd"},"source":["# *** IF NOT USING GOOGLE DRIVE, RUN BELOW ***\n","# path = './tiny-imagenet-200'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hb68oauo7F8Y"},"source":["# Import from-scratch implementations\n","from utils.helper_funcs import spaceToDepth\n","from utils.Triangular2LR import TriangularCyclicalLR"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xEkH47LG0iF1"},"source":["# Import libraries\n","import sys\n","import os\n","from PIL import Image\n","\n","import numpy as np\n","import sklearn\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.optimizers import Adam\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","import numpy as np\n","import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5RDKCTaL1wBu","executionInfo":{"status":"ok","timestamp":1608408112310,"user_tz":300,"elapsed":8570,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"839d7653-daf7-4bbe-aa8b-5f2ad56e8ba2"},"source":["! pip install zipfile37\n","! pip install imgaug\n","import imgaug as ia\n","from imgaug import augmenters as iaa"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting zipfile37\n","  Downloading https://files.pythonhosted.org/packages/ae/1a/2edc84f449c386215ceccd0bafc39e6c8493d69231120623e536d1377b07/zipfile37-0.1.3.tar.gz\n","Building wheels for collected packages: zipfile37\n","  Building wheel for zipfile37 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for zipfile37: filename=zipfile37-0.1.3-cp36-none-any.whl size=21029 sha256=a78f92ba6bdac0ab07bd35e4b24071202eceaa6885e4182acda3e7d4996c45c9\n","  Stored in directory: /root/.cache/pip/wheels/74/f0/8f/4a51e246d9fe8ae29723b7ca2723c8a1bae7b0da6379a40b0e\n","Successfully built zipfile37\n","Installing collected packages: zipfile37\n","Successfully installed zipfile37-0.1.3\n","Requirement already satisfied: imgaug in /usr/local/lib/python3.6/dist-packages (0.2.9)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from imgaug) (7.0.0)\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.6/dist-packages (from imgaug) (4.1.2.30)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.6/dist-packages (from imgaug) (2.4.1)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.6/dist-packages (from imgaug) (1.19.4)\n","Requirement already satisfied: scikit-image>=0.11.0 in /usr/local/lib/python3.6/dist-packages (from imgaug) (0.16.2)\n","Requirement already satisfied: Shapely in /usr/local/lib/python3.6/dist-packages (from imgaug) (1.7.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from imgaug) (1.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from imgaug) (1.15.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from imgaug) (3.2.2)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug) (2.5)\n","Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug) (1.1.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->imgaug) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib->imgaug) (0.10.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->imgaug) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->imgaug) (2.4.7)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->scikit-image>=0.11.0->imgaug) (4.4.2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vJLqWN2h1yuj","executionInfo":{"status":"ok","timestamp":1608408132357,"user_tz":300,"elapsed":20034,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"0f02356b-56ad-43ee-c75a-6c6b4801974e"},"source":["# Here, we use the unzip method provided in HW2 to extract data from a zip file.\n","from zipfile import ZipFile\n","print(path)\n","# Extract Data\n","if not os.path.exists(path + '.zip'):\n","    raise Exception('Dataset not found. Please read instructions above this cell and download dataset.')\n","\n","if not os.path.exists(path):\n","    print(\"Extracting data ...\")\n","    ZipFile(path + '.zip', 'r').extractall('./')\n","    \n","print(\"Directory 'tiny-imagenet-200' found\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["./drive/MyDrive/E4040_Final_Project/tiny-imagenet-200\n","Extracting data ...\n","Directory 'tiny-imagenet-200' found\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"77jyQ-pv11DK"},"source":["# Preprocessing and Dataset Generation"]},{"cell_type":"markdown","metadata":{"id":"hK4hiWZN4h6K"},"source":["**Load Train and val data. Similar to HW2, task 4, we used Keras ImageDataGenerator class to load train generator**\n","\n","+ Subfolder structure of TinyImagenet dataset contains images sorted into respective classes\n","+ This allows us to easily call 'flow_from_directory', and directly apply preprocessing via keras datagenerator"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5wIjCXxb10tf","executionInfo":{"status":"ok","timestamp":1608408136774,"user_tz":300,"elapsed":24430,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"fd854223-a1f8-4a9c-9964-2fa4ab644de3"},"source":["# BatchSize = 128 # <- Global batch size\n","# train_datagen = ImageDataGenerator(rescale=1/255.0)\n","# # train_datagen = ImageDataGenerator(rescale=1/255.0, preprocessing_function=v_flip)\n","# train_generator = train_datagen.flow_from_directory('./tiny-imagenet-200/train', target_size=(64, 64), batch_size = BatchSize, shuffle=True)\n","# classes_lookup = train_generator.class_indices\n","# print(classes_lookup)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 100000 images belonging to 200 classes.\n","{'n01443537': 0, 'n01629819': 1, 'n01641577': 2, 'n01644900': 3, 'n01698640': 4, 'n01742172': 5, 'n01768244': 6, 'n01770393': 7, 'n01774384': 8, 'n01774750': 9, 'n01784675': 10, 'n01855672': 11, 'n01882714': 12, 'n01910747': 13, 'n01917289': 14, 'n01944390': 15, 'n01945685': 16, 'n01950731': 17, 'n01983481': 18, 'n01984695': 19, 'n02002724': 20, 'n02056570': 21, 'n02058221': 22, 'n02074367': 23, 'n02085620': 24, 'n02094433': 25, 'n02099601': 26, 'n02099712': 27, 'n02106662': 28, 'n02113799': 29, 'n02123045': 30, 'n02123394': 31, 'n02124075': 32, 'n02125311': 33, 'n02129165': 34, 'n02132136': 35, 'n02165456': 36, 'n02190166': 37, 'n02206856': 38, 'n02226429': 39, 'n02231487': 40, 'n02233338': 41, 'n02236044': 42, 'n02268443': 43, 'n02279972': 44, 'n02281406': 45, 'n02321529': 46, 'n02364673': 47, 'n02395406': 48, 'n02403003': 49, 'n02410509': 50, 'n02415577': 51, 'n02423022': 52, 'n02437312': 53, 'n02480495': 54, 'n02481823': 55, 'n02486410': 56, 'n02504458': 57, 'n02509815': 58, 'n02666196': 59, 'n02669723': 60, 'n02699494': 61, 'n02730930': 62, 'n02769748': 63, 'n02788148': 64, 'n02791270': 65, 'n02793495': 66, 'n02795169': 67, 'n02802426': 68, 'n02808440': 69, 'n02814533': 70, 'n02814860': 71, 'n02815834': 72, 'n02823428': 73, 'n02837789': 74, 'n02841315': 75, 'n02843684': 76, 'n02883205': 77, 'n02892201': 78, 'n02906734': 79, 'n02909870': 80, 'n02917067': 81, 'n02927161': 82, 'n02948072': 83, 'n02950826': 84, 'n02963159': 85, 'n02977058': 86, 'n02988304': 87, 'n02999410': 88, 'n03014705': 89, 'n03026506': 90, 'n03042490': 91, 'n03085013': 92, 'n03089624': 93, 'n03100240': 94, 'n03126707': 95, 'n03160309': 96, 'n03179701': 97, 'n03201208': 98, 'n03250847': 99, 'n03255030': 100, 'n03355925': 101, 'n03388043': 102, 'n03393912': 103, 'n03400231': 104, 'n03404251': 105, 'n03424325': 106, 'n03444034': 107, 'n03447447': 108, 'n03544143': 109, 'n03584254': 110, 'n03599486': 111, 'n03617480': 112, 'n03637318': 113, 'n03649909': 114, 'n03662601': 115, 'n03670208': 116, 'n03706229': 117, 'n03733131': 118, 'n03763968': 119, 'n03770439': 120, 'n03796401': 121, 'n03804744': 122, 'n03814639': 123, 'n03837869': 124, 'n03838899': 125, 'n03854065': 126, 'n03891332': 127, 'n03902125': 128, 'n03930313': 129, 'n03937543': 130, 'n03970156': 131, 'n03976657': 132, 'n03977966': 133, 'n03980874': 134, 'n03983396': 135, 'n03992509': 136, 'n04008634': 137, 'n04023962': 138, 'n04067472': 139, 'n04070727': 140, 'n04074963': 141, 'n04099969': 142, 'n04118538': 143, 'n04133789': 144, 'n04146614': 145, 'n04149813': 146, 'n04179913': 147, 'n04251144': 148, 'n04254777': 149, 'n04259630': 150, 'n04265275': 151, 'n04275548': 152, 'n04285008': 153, 'n04311004': 154, 'n04328186': 155, 'n04356056': 156, 'n04366367': 157, 'n04371430': 158, 'n04376876': 159, 'n04398044': 160, 'n04399382': 161, 'n04417672': 162, 'n04456115': 163, 'n04465501': 164, 'n04486054': 165, 'n04487081': 166, 'n04501370': 167, 'n04507155': 168, 'n04532106': 169, 'n04532670': 170, 'n04540053': 171, 'n04560804': 172, 'n04562935': 173, 'n04596742': 174, 'n04597913': 175, 'n06596364': 176, 'n07579787': 177, 'n07583066': 178, 'n07614500': 179, 'n07615774': 180, 'n07695742': 181, 'n07711569': 182, 'n07715103': 183, 'n07720875': 184, 'n07734744': 185, 'n07747607': 186, 'n07749582': 187, 'n07753592': 188, 'n07768694': 189, 'n07871810': 190, 'n07873807': 191, 'n07875152': 192, 'n07920052': 193, 'n09193705': 194, 'n09246464': 195, 'n09256479': 196, 'n09332890': 197, 'n09428293': 198, 'n12267677': 199}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UaInNh4H4Sqj"},"source":["+ Article suggests use of train and valid generators:\n","  +  https://towardsdatascience.com/keras-data-generators-and-how-to-use-them-b69129ed779c\n","\n","+ Article that shows how to create generator based on validation data's directory using a dataframe for labels\n","  + https://vijayabhaskar96.medium.com/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\n","\n","Ultimately, when we tried using a validation generator, loss graph started to look more like what was observed in paper"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8xwV7UV40jdJ","executionInfo":{"status":"ok","timestamp":1608408136775,"user_tz":300,"elapsed":24411,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"c125a6f2-c8da-47f2-a384-5eca57c62e75"},"source":["# valid_data = pd.read_csv('./tiny-imagenet-200/val/val_annotations.txt', sep='\\t', header=None, names=[\"Img\", \"Label\", \"f1\", \"f2\", \"f3\", \"f4\"]) # <- Read provided txt file to generate dataframe mapping of labels to images\n","# valid_datagen = ImageDataGenerator(rescale=1/255.0)\n","# validation_generator = valid_datagen.flow_from_dataframe(valid_data, directory='./tiny-imagenet-200/val/images/', x_col=\"Img\", y_col=\"Label\", batch_size=BatchSize, shuffle=True, class_mode='categorical', target_size=(64, 64))\n","# print(validation_generator.class_indices)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 10000 validated image filenames belonging to 200 classes.\n","{'n01443537': 0, 'n01629819': 1, 'n01641577': 2, 'n01644900': 3, 'n01698640': 4, 'n01742172': 5, 'n01768244': 6, 'n01770393': 7, 'n01774384': 8, 'n01774750': 9, 'n01784675': 10, 'n01855672': 11, 'n01882714': 12, 'n01910747': 13, 'n01917289': 14, 'n01944390': 15, 'n01945685': 16, 'n01950731': 17, 'n01983481': 18, 'n01984695': 19, 'n02002724': 20, 'n02056570': 21, 'n02058221': 22, 'n02074367': 23, 'n02085620': 24, 'n02094433': 25, 'n02099601': 26, 'n02099712': 27, 'n02106662': 28, 'n02113799': 29, 'n02123045': 30, 'n02123394': 31, 'n02124075': 32, 'n02125311': 33, 'n02129165': 34, 'n02132136': 35, 'n02165456': 36, 'n02190166': 37, 'n02206856': 38, 'n02226429': 39, 'n02231487': 40, 'n02233338': 41, 'n02236044': 42, 'n02268443': 43, 'n02279972': 44, 'n02281406': 45, 'n02321529': 46, 'n02364673': 47, 'n02395406': 48, 'n02403003': 49, 'n02410509': 50, 'n02415577': 51, 'n02423022': 52, 'n02437312': 53, 'n02480495': 54, 'n02481823': 55, 'n02486410': 56, 'n02504458': 57, 'n02509815': 58, 'n02666196': 59, 'n02669723': 60, 'n02699494': 61, 'n02730930': 62, 'n02769748': 63, 'n02788148': 64, 'n02791270': 65, 'n02793495': 66, 'n02795169': 67, 'n02802426': 68, 'n02808440': 69, 'n02814533': 70, 'n02814860': 71, 'n02815834': 72, 'n02823428': 73, 'n02837789': 74, 'n02841315': 75, 'n02843684': 76, 'n02883205': 77, 'n02892201': 78, 'n02906734': 79, 'n02909870': 80, 'n02917067': 81, 'n02927161': 82, 'n02948072': 83, 'n02950826': 84, 'n02963159': 85, 'n02977058': 86, 'n02988304': 87, 'n02999410': 88, 'n03014705': 89, 'n03026506': 90, 'n03042490': 91, 'n03085013': 92, 'n03089624': 93, 'n03100240': 94, 'n03126707': 95, 'n03160309': 96, 'n03179701': 97, 'n03201208': 98, 'n03250847': 99, 'n03255030': 100, 'n03355925': 101, 'n03388043': 102, 'n03393912': 103, 'n03400231': 104, 'n03404251': 105, 'n03424325': 106, 'n03444034': 107, 'n03447447': 108, 'n03544143': 109, 'n03584254': 110, 'n03599486': 111, 'n03617480': 112, 'n03637318': 113, 'n03649909': 114, 'n03662601': 115, 'n03670208': 116, 'n03706229': 117, 'n03733131': 118, 'n03763968': 119, 'n03770439': 120, 'n03796401': 121, 'n03804744': 122, 'n03814639': 123, 'n03837869': 124, 'n03838899': 125, 'n03854065': 126, 'n03891332': 127, 'n03902125': 128, 'n03930313': 129, 'n03937543': 130, 'n03970156': 131, 'n03976657': 132, 'n03977966': 133, 'n03980874': 134, 'n03983396': 135, 'n03992509': 136, 'n04008634': 137, 'n04023962': 138, 'n04067472': 139, 'n04070727': 140, 'n04074963': 141, 'n04099969': 142, 'n04118538': 143, 'n04133789': 144, 'n04146614': 145, 'n04149813': 146, 'n04179913': 147, 'n04251144': 148, 'n04254777': 149, 'n04259630': 150, 'n04265275': 151, 'n04275548': 152, 'n04285008': 153, 'n04311004': 154, 'n04328186': 155, 'n04356056': 156, 'n04366367': 157, 'n04371430': 158, 'n04376876': 159, 'n04398044': 160, 'n04399382': 161, 'n04417672': 162, 'n04456115': 163, 'n04465501': 164, 'n04486054': 165, 'n04487081': 166, 'n04501370': 167, 'n04507155': 168, 'n04532106': 169, 'n04532670': 170, 'n04540053': 171, 'n04560804': 172, 'n04562935': 173, 'n04596742': 174, 'n04597913': 175, 'n06596364': 176, 'n07579787': 177, 'n07583066': 178, 'n07614500': 179, 'n07615774': 180, 'n07695742': 181, 'n07711569': 182, 'n07715103': 183, 'n07720875': 184, 'n07734744': 185, 'n07747607': 186, 'n07749582': 187, 'n07753592': 188, 'n07768694': 189, 'n07871810': 190, 'n07873807': 191, 'n07875152': 192, 'n07920052': 193, 'n09193705': 194, 'n09246464': 195, 'n09256479': 196, 'n09332890': 197, 'n09428293': 198, 'n12267677': 199}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZDLsiZnWzRTE"},"source":["## Image Augmentation"]},{"cell_type":"code","metadata":{"id":"KLZClr-qzP7S"},"source":["def Image_augmentation(input_img): \n","  # Randomly apply 11 transformations to half of the dataset \n","  seq = iaa.Sometimes(0.5,iaa.Sequential([\n","  iaa.Fliplr(0.5),  # Horizontal flip\n","  iaa.Flipud(0.2), # Vertical flip\n","  iaa.GaussianBlur(sigma=(0, 0.5)),  # GaussianBlur\n","  iaa.CropAndPad(percent=(-0.25, 0.25), pad_mode=ia.ALL,pad_cval=(0, 255)),  # Crop images\n","  iaa.Affine( scale={\"x\": (0.8, 1.2), \"y\": (0.8, 1.2)}, \n","             translate_percent={\"x\": (-0.15, 0.15), \n","                                \"y\": (-0.15, 0.15)},rotate=(-30, 30), shear=(-15, 15),order=[0, 1],cval=(0, 255), mode=ia.ALL),  # Affine transformations: scale, translate, rotate, shear\n","  iaa.CoarseDropout((0.03, 0.15), size_percent=(0.02, 0.05),per_channel=0.2),  # Corse dropout\n","  iaa.Multiply((0.9, 1.1), per_channel=0.25),    # Multiply\n","  iaa.ContrastNormalization((0.75, 1.5), per_channel=0.5)], random_order = True))  #Contrast Normalization\n","  \n","  augm_img = seq.augment_image(input_img)\n","  return augm_img"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DI8rOiwk2jvM","executionInfo":{"elapsed":4847,"status":"ok","timestamp":1608301565806,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"137f281d-edc7-48b6-91af-9f873ed0cf9d"},"source":["# Train Generator:\n","BatchSize = 128 # <- Global batch size\n","train_datagen = ImageDataGenerator(rescale=1/255.0, preprocessing_function = Image_augmentation)\n","train_generator = train_datagen.flow_from_directory('./tiny-imagenet-200/train', target_size=(64, 64), batch_size = BatchSize, shuffle=True)\n","classes_lookup = train_generator.class_indices\n","print(classes_lookup)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 100000 images belonging to 200 classes.\n","{'n01443537': 0, 'n01629819': 1, 'n01641577': 2, 'n01644900': 3, 'n01698640': 4, 'n01742172': 5, 'n01768244': 6, 'n01770393': 7, 'n01774384': 8, 'n01774750': 9, 'n01784675': 10, 'n01855672': 11, 'n01882714': 12, 'n01910747': 13, 'n01917289': 14, 'n01944390': 15, 'n01945685': 16, 'n01950731': 17, 'n01983481': 18, 'n01984695': 19, 'n02002724': 20, 'n02056570': 21, 'n02058221': 22, 'n02074367': 23, 'n02085620': 24, 'n02094433': 25, 'n02099601': 26, 'n02099712': 27, 'n02106662': 28, 'n02113799': 29, 'n02123045': 30, 'n02123394': 31, 'n02124075': 32, 'n02125311': 33, 'n02129165': 34, 'n02132136': 35, 'n02165456': 36, 'n02190166': 37, 'n02206856': 38, 'n02226429': 39, 'n02231487': 40, 'n02233338': 41, 'n02236044': 42, 'n02268443': 43, 'n02279972': 44, 'n02281406': 45, 'n02321529': 46, 'n02364673': 47, 'n02395406': 48, 'n02403003': 49, 'n02410509': 50, 'n02415577': 51, 'n02423022': 52, 'n02437312': 53, 'n02480495': 54, 'n02481823': 55, 'n02486410': 56, 'n02504458': 57, 'n02509815': 58, 'n02666196': 59, 'n02669723': 60, 'n02699494': 61, 'n02730930': 62, 'n02769748': 63, 'n02788148': 64, 'n02791270': 65, 'n02793495': 66, 'n02795169': 67, 'n02802426': 68, 'n02808440': 69, 'n02814533': 70, 'n02814860': 71, 'n02815834': 72, 'n02823428': 73, 'n02837789': 74, 'n02841315': 75, 'n02843684': 76, 'n02883205': 77, 'n02892201': 78, 'n02906734': 79, 'n02909870': 80, 'n02917067': 81, 'n02927161': 82, 'n02948072': 83, 'n02950826': 84, 'n02963159': 85, 'n02977058': 86, 'n02988304': 87, 'n02999410': 88, 'n03014705': 89, 'n03026506': 90, 'n03042490': 91, 'n03085013': 92, 'n03089624': 93, 'n03100240': 94, 'n03126707': 95, 'n03160309': 96, 'n03179701': 97, 'n03201208': 98, 'n03250847': 99, 'n03255030': 100, 'n03355925': 101, 'n03388043': 102, 'n03393912': 103, 'n03400231': 104, 'n03404251': 105, 'n03424325': 106, 'n03444034': 107, 'n03447447': 108, 'n03544143': 109, 'n03584254': 110, 'n03599486': 111, 'n03617480': 112, 'n03637318': 113, 'n03649909': 114, 'n03662601': 115, 'n03670208': 116, 'n03706229': 117, 'n03733131': 118, 'n03763968': 119, 'n03770439': 120, 'n03796401': 121, 'n03804744': 122, 'n03814639': 123, 'n03837869': 124, 'n03838899': 125, 'n03854065': 126, 'n03891332': 127, 'n03902125': 128, 'n03930313': 129, 'n03937543': 130, 'n03970156': 131, 'n03976657': 132, 'n03977966': 133, 'n03980874': 134, 'n03983396': 135, 'n03992509': 136, 'n04008634': 137, 'n04023962': 138, 'n04067472': 139, 'n04070727': 140, 'n04074963': 141, 'n04099969': 142, 'n04118538': 143, 'n04133789': 144, 'n04146614': 145, 'n04149813': 146, 'n04179913': 147, 'n04251144': 148, 'n04254777': 149, 'n04259630': 150, 'n04265275': 151, 'n04275548': 152, 'n04285008': 153, 'n04311004': 154, 'n04328186': 155, 'n04356056': 156, 'n04366367': 157, 'n04371430': 158, 'n04376876': 159, 'n04398044': 160, 'n04399382': 161, 'n04417672': 162, 'n04456115': 163, 'n04465501': 164, 'n04486054': 165, 'n04487081': 166, 'n04501370': 167, 'n04507155': 168, 'n04532106': 169, 'n04532670': 170, 'n04540053': 171, 'n04560804': 172, 'n04562935': 173, 'n04596742': 174, 'n04597913': 175, 'n06596364': 176, 'n07579787': 177, 'n07583066': 178, 'n07614500': 179, 'n07615774': 180, 'n07695742': 181, 'n07711569': 182, 'n07715103': 183, 'n07720875': 184, 'n07734744': 185, 'n07747607': 186, 'n07749582': 187, 'n07753592': 188, 'n07768694': 189, 'n07871810': 190, 'n07873807': 191, 'n07875152': 192, 'n07920052': 193, 'n09193705': 194, 'n09246464': 195, 'n09256479': 196, 'n09332890': 197, 'n09428293': 198, 'n12267677': 199}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JFMXQfiZ3Cjo","executionInfo":{"elapsed":518,"status":"ok","timestamp":1608301568693,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"a42e6bfb-4f7f-48bc-85f8-33fe97bf296c"},"source":["# Valid Generator Generator:\n","\n","valid_data = pd.read_csv('./tiny-imagenet-200/val/val_annotations.txt', sep='\\t', header=None, names=[\"Img\", \"Label\", \"f1\", \"f2\", \"f3\", \"f4\"]) # <- Read provided txt file to generate dataframe mapping of labels to images\n","valid_datagen = ImageDataGenerator(rescale=1/255.0)\n","validation_generator = valid_datagen.flow_from_dataframe(valid_data, directory='./tiny-imagenet-200/val/images/', x_col=\"Img\", y_col=\"Label\", batch_size=BatchSize, shuffle=True, class_mode='categorical', target_size=(64, 64))\n","print(validation_generator.class_indices)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 10000 validated image filenames belonging to 200 classes.\n","{'n01443537': 0, 'n01629819': 1, 'n01641577': 2, 'n01644900': 3, 'n01698640': 4, 'n01742172': 5, 'n01768244': 6, 'n01770393': 7, 'n01774384': 8, 'n01774750': 9, 'n01784675': 10, 'n01855672': 11, 'n01882714': 12, 'n01910747': 13, 'n01917289': 14, 'n01944390': 15, 'n01945685': 16, 'n01950731': 17, 'n01983481': 18, 'n01984695': 19, 'n02002724': 20, 'n02056570': 21, 'n02058221': 22, 'n02074367': 23, 'n02085620': 24, 'n02094433': 25, 'n02099601': 26, 'n02099712': 27, 'n02106662': 28, 'n02113799': 29, 'n02123045': 30, 'n02123394': 31, 'n02124075': 32, 'n02125311': 33, 'n02129165': 34, 'n02132136': 35, 'n02165456': 36, 'n02190166': 37, 'n02206856': 38, 'n02226429': 39, 'n02231487': 40, 'n02233338': 41, 'n02236044': 42, 'n02268443': 43, 'n02279972': 44, 'n02281406': 45, 'n02321529': 46, 'n02364673': 47, 'n02395406': 48, 'n02403003': 49, 'n02410509': 50, 'n02415577': 51, 'n02423022': 52, 'n02437312': 53, 'n02480495': 54, 'n02481823': 55, 'n02486410': 56, 'n02504458': 57, 'n02509815': 58, 'n02666196': 59, 'n02669723': 60, 'n02699494': 61, 'n02730930': 62, 'n02769748': 63, 'n02788148': 64, 'n02791270': 65, 'n02793495': 66, 'n02795169': 67, 'n02802426': 68, 'n02808440': 69, 'n02814533': 70, 'n02814860': 71, 'n02815834': 72, 'n02823428': 73, 'n02837789': 74, 'n02841315': 75, 'n02843684': 76, 'n02883205': 77, 'n02892201': 78, 'n02906734': 79, 'n02909870': 80, 'n02917067': 81, 'n02927161': 82, 'n02948072': 83, 'n02950826': 84, 'n02963159': 85, 'n02977058': 86, 'n02988304': 87, 'n02999410': 88, 'n03014705': 89, 'n03026506': 90, 'n03042490': 91, 'n03085013': 92, 'n03089624': 93, 'n03100240': 94, 'n03126707': 95, 'n03160309': 96, 'n03179701': 97, 'n03201208': 98, 'n03250847': 99, 'n03255030': 100, 'n03355925': 101, 'n03388043': 102, 'n03393912': 103, 'n03400231': 104, 'n03404251': 105, 'n03424325': 106, 'n03444034': 107, 'n03447447': 108, 'n03544143': 109, 'n03584254': 110, 'n03599486': 111, 'n03617480': 112, 'n03637318': 113, 'n03649909': 114, 'n03662601': 115, 'n03670208': 116, 'n03706229': 117, 'n03733131': 118, 'n03763968': 119, 'n03770439': 120, 'n03796401': 121, 'n03804744': 122, 'n03814639': 123, 'n03837869': 124, 'n03838899': 125, 'n03854065': 126, 'n03891332': 127, 'n03902125': 128, 'n03930313': 129, 'n03937543': 130, 'n03970156': 131, 'n03976657': 132, 'n03977966': 133, 'n03980874': 134, 'n03983396': 135, 'n03992509': 136, 'n04008634': 137, 'n04023962': 138, 'n04067472': 139, 'n04070727': 140, 'n04074963': 141, 'n04099969': 142, 'n04118538': 143, 'n04133789': 144, 'n04146614': 145, 'n04149813': 146, 'n04179913': 147, 'n04251144': 148, 'n04254777': 149, 'n04259630': 150, 'n04265275': 151, 'n04275548': 152, 'n04285008': 153, 'n04311004': 154, 'n04328186': 155, 'n04356056': 156, 'n04366367': 157, 'n04371430': 158, 'n04376876': 159, 'n04398044': 160, 'n04399382': 161, 'n04417672': 162, 'n04456115': 163, 'n04465501': 164, 'n04486054': 165, 'n04487081': 166, 'n04501370': 167, 'n04507155': 168, 'n04532106': 169, 'n04532670': 170, 'n04540053': 171, 'n04560804': 172, 'n04562935': 173, 'n04596742': 174, 'n04597913': 175, 'n06596364': 176, 'n07579787': 177, 'n07583066': 178, 'n07614500': 179, 'n07615774': 180, 'n07695742': 181, 'n07711569': 182, 'n07715103': 183, 'n07720875': 184, 'n07734744': 185, 'n07747607': 186, 'n07749582': 187, 'n07753592': 188, 'n07768694': 189, 'n07871810': 190, 'n07873807': 191, 'n07875152': 192, 'n07920052': 193, 'n09193705': 194, 'n09246464': 195, 'n09256479': 196, 'n09332890': 197, 'n09428293': 198, 'n12267677': 199}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"-MYmRqXb7h4x","executionInfo":{"elapsed":876,"status":"ok","timestamp":1608152258467,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"f7448c2b-9715-4680-d587-7554f108afd8"},"source":["# Test imgaug functions\n","x, y = next(train_generator)\n","x = x[0]\n","imgplot2=plt.imshow(x)\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"Hu6IhCd31-fC"},"source":["# Network 2 Architecture"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fHGHFN8T2A0L","executionInfo":{"status":"ok","timestamp":1608408140548,"user_tz":300,"elapsed":22126,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"ef19ad92-0176-4303-87d5-8f25683bdda9"},"source":["#Define models using Keras.Models similar to HW3 Task 2\n","\n","InputDims = (64,64)\n","NumChannels = 3\n","\n","from tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Activation, MaxPool2D, Concatenate, GlobalAveragePooling2D, Lambda\n","from tensorflow.keras import Model\n","\n","## Input\n","inputs = Input(shape=(InputDims[0],InputDims[1],3))\n","# inputs = Input(shape=(None, None,3)) # <- Use None to allow flexible input shape.\n","\n","## Block 1: 1x Conv2D (32)\n","\n","block1 = Conv2D(filters=32, kernel_size=(3,3), \n","                strides=(1,1), padding='same', \n","                activation=None, kernel_initializer=\"VarianceScaling\", \n","                kernel_regularizer=keras.regularizers.l2(2e-4))(inputs) # <- Network2 params: VarianceScaling, L2(2e-4)\n","block1 = BatchNormalization()(block1)\n","block1 = Activation('relu')(block1)\n","\n","## Block 2: 4x Conv2D layers (128,128,128) with BatchNorm and Relu activation with final MaxPool2D\n","\n","block2 = Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block1)\n","block2 = BatchNormalization()(block2)\n","block2 = Activation('relu')(block2)\n","block2 = Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block2)\n","block2 = BatchNormalization()(block2)\n","block2 = Activation('relu')(block2)\n","block2 = Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block2)\n","block2 = BatchNormalization()(block2)\n","block2 = Activation('relu')(block2)\n","block2 = Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block2)\n","block2 = BatchNormalization()(block2)\n","block2 = Activation('relu')(block2)\n","\n","block2 = Concatenate()([block1, block2])\n","block2 = BatchNormalization()(block2) #<- \"Added a Batch Norm and ReLU after each shortcut\"\n","block2 = Activation('relu')(block2)\n","\n","block2 = MaxPool2D(pool_size=(2,2), strides=2)(block2)\n","\n","## Block 3: 4x Conv2D (32)\n","\n","block3 = Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block2) \n","block3 = BatchNormalization()(block3)\n","block3 = Activation('relu')(block3)\n","block3 = Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block3) \n","block3 = BatchNormalization()(block3)\n","block3 = Activation('relu')(block3)\n","block3 = Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block3) \n","block3 = BatchNormalization()(block3)\n","block3 = Activation('relu')(block3)\n","block3 = Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block3) \n","block3 = BatchNormalization()(block3)\n","block3 = Activation('relu')(block3)\n","\n","block3 = Concatenate()([block2, block3])\n","block3 = BatchNormalization()(block3) #<- \"Added a Batch Norm and ReLU after each shortcut\"\n","block3 = Activation('relu')(block3)\n","\n","block3 = MaxPool2D(pool_size=(2,2), strides=2)(block3)\n","\n","## Block 4: 4x Conv2d(512)\n","\n","block4 = Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block3) \n","block4 = BatchNormalization()(block4)\n","block4 = Activation('relu')(block4)\n","block4 = Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block4) \n","block4 = BatchNormalization()(block4)\n","block4 = Activation('relu')(block4)\n","block4 = Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block4) \n","block4 = BatchNormalization()(block4)\n","block4 = Activation('relu')(block4)\n","block4 = Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block4) \n","block4 = BatchNormalization()(block4)\n","block4 = Activation('relu')(block4)\n","\n","block4 = Concatenate()([block3, block4])\n","block4 = BatchNormalization()(block4) #<- \"Added a Batch Norm and ReLU after each shortcut\"\n","block4 = Activation('relu')(block4)\n","\n","block4 = MaxPool2D(pool_size=(2,2), strides=2) (block4)\n","\n","## Block 5: Final Conv2d (200) and GlobalAveragePool2D\n","block5 = Conv2D(filters=200, kernel_size=(1,1), strides=(1,1), padding='same', activation=None, \n","                kernel_initializer=\"VarianceScaling\", kernel_regularizer=keras.regularizers.l2(2e-4))(block4)\n","block5 = GlobalAveragePooling2D()(block5)\n","\n","## Output\n","output = Activation('softmax')(block5)\n","\n","model2 = Model(inputs=[inputs], outputs=[output])\n","model2.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_1 (InputLayer)            [(None, 64, 64, 3)]  0                                            \n","__________________________________________________________________________________________________\n","conv2d (Conv2D)                 (None, 64, 64, 32)   896         input_1[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization (BatchNorma (None, 64, 64, 32)   128         conv2d[0][0]                     \n","__________________________________________________________________________________________________\n","activation (Activation)         (None, 64, 64, 32)   0           batch_normalization[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_1 (Conv2D)               (None, 64, 64, 128)  36992       activation[0][0]                 \n","__________________________________________________________________________________________________\n","batch_normalization_1 (BatchNor (None, 64, 64, 128)  512         conv2d_1[0][0]                   \n","__________________________________________________________________________________________________\n","activation_1 (Activation)       (None, 64, 64, 128)  0           batch_normalization_1[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_2 (Conv2D)               (None, 64, 64, 128)  147584      activation_1[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_2 (BatchNor (None, 64, 64, 128)  512         conv2d_2[0][0]                   \n","__________________________________________________________________________________________________\n","activation_2 (Activation)       (None, 64, 64, 128)  0           batch_normalization_2[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_3 (Conv2D)               (None, 64, 64, 128)  147584      activation_2[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_3 (BatchNor (None, 64, 64, 128)  512         conv2d_3[0][0]                   \n","__________________________________________________________________________________________________\n","activation_3 (Activation)       (None, 64, 64, 128)  0           batch_normalization_3[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_4 (Conv2D)               (None, 64, 64, 128)  147584      activation_3[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_4 (BatchNor (None, 64, 64, 128)  512         conv2d_4[0][0]                   \n","__________________________________________________________________________________________________\n","activation_4 (Activation)       (None, 64, 64, 128)  0           batch_normalization_4[0][0]      \n","__________________________________________________________________________________________________\n","concatenate (Concatenate)       (None, 64, 64, 160)  0           activation[0][0]                 \n","                                                                 activation_4[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_5 (BatchNor (None, 64, 64, 160)  640         concatenate[0][0]                \n","__________________________________________________________________________________________________\n","activation_5 (Activation)       (None, 64, 64, 160)  0           batch_normalization_5[0][0]      \n","__________________________________________________________________________________________________\n","max_pooling2d (MaxPooling2D)    (None, 32, 32, 160)  0           activation_5[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_5 (Conv2D)               (None, 32, 32, 256)  368896      max_pooling2d[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_6 (BatchNor (None, 32, 32, 256)  1024        conv2d_5[0][0]                   \n","__________________________________________________________________________________________________\n","activation_6 (Activation)       (None, 32, 32, 256)  0           batch_normalization_6[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_6 (Conv2D)               (None, 32, 32, 256)  590080      activation_6[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_7 (BatchNor (None, 32, 32, 256)  1024        conv2d_6[0][0]                   \n","__________________________________________________________________________________________________\n","activation_7 (Activation)       (None, 32, 32, 256)  0           batch_normalization_7[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_7 (Conv2D)               (None, 32, 32, 256)  590080      activation_7[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_8 (BatchNor (None, 32, 32, 256)  1024        conv2d_7[0][0]                   \n","__________________________________________________________________________________________________\n","activation_8 (Activation)       (None, 32, 32, 256)  0           batch_normalization_8[0][0]      \n","__________________________________________________________________________________________________\n","conv2d_8 (Conv2D)               (None, 32, 32, 256)  590080      activation_8[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_9 (BatchNor (None, 32, 32, 256)  1024        conv2d_8[0][0]                   \n","__________________________________________________________________________________________________\n","activation_9 (Activation)       (None, 32, 32, 256)  0           batch_normalization_9[0][0]      \n","__________________________________________________________________________________________________\n","concatenate_1 (Concatenate)     (None, 32, 32, 416)  0           max_pooling2d[0][0]              \n","                                                                 activation_9[0][0]               \n","__________________________________________________________________________________________________\n","batch_normalization_10 (BatchNo (None, 32, 32, 416)  1664        concatenate_1[0][0]              \n","__________________________________________________________________________________________________\n","activation_10 (Activation)      (None, 32, 32, 416)  0           batch_normalization_10[0][0]     \n","__________________________________________________________________________________________________\n","max_pooling2d_1 (MaxPooling2D)  (None, 16, 16, 416)  0           activation_10[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_9 (Conv2D)               (None, 16, 16, 512)  1917440     max_pooling2d_1[0][0]            \n","__________________________________________________________________________________________________\n","batch_normalization_11 (BatchNo (None, 16, 16, 512)  2048        conv2d_9[0][0]                   \n","__________________________________________________________________________________________________\n","activation_11 (Activation)      (None, 16, 16, 512)  0           batch_normalization_11[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_10 (Conv2D)              (None, 16, 16, 512)  2359808     activation_11[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_12 (BatchNo (None, 16, 16, 512)  2048        conv2d_10[0][0]                  \n","__________________________________________________________________________________________________\n","activation_12 (Activation)      (None, 16, 16, 512)  0           batch_normalization_12[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_11 (Conv2D)              (None, 16, 16, 512)  2359808     activation_12[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_13 (BatchNo (None, 16, 16, 512)  2048        conv2d_11[0][0]                  \n","__________________________________________________________________________________________________\n","activation_13 (Activation)      (None, 16, 16, 512)  0           batch_normalization_13[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_12 (Conv2D)              (None, 16, 16, 512)  2359808     activation_13[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_14 (BatchNo (None, 16, 16, 512)  2048        conv2d_12[0][0]                  \n","__________________________________________________________________________________________________\n","activation_14 (Activation)      (None, 16, 16, 512)  0           batch_normalization_14[0][0]     \n","__________________________________________________________________________________________________\n","concatenate_2 (Concatenate)     (None, 16, 16, 928)  0           max_pooling2d_1[0][0]            \n","                                                                 activation_14[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_15 (BatchNo (None, 16, 16, 928)  3712        concatenate_2[0][0]              \n","__________________________________________________________________________________________________\n","activation_15 (Activation)      (None, 16, 16, 928)  0           batch_normalization_15[0][0]     \n","__________________________________________________________________________________________________\n","max_pooling2d_2 (MaxPooling2D)  (None, 8, 8, 928)    0           activation_15[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_13 (Conv2D)              (None, 8, 8, 200)    185800      max_pooling2d_2[0][0]            \n","__________________________________________________________________________________________________\n","global_average_pooling2d (Globa (None, 200)          0           conv2d_13[0][0]                  \n","__________________________________________________________________________________________________\n","activation_16 (Activation)      (None, 200)          0           global_average_pooling2d[0][0]   \n","==================================================================================================\n","Total params: 11,822,920\n","Trainable params: 11,812,680\n","Non-trainable params: 10,240\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bVtR3G242Fbw"},"source":["# Training methodology: \n","\n","Based on Table 1 from paper, 6 Training Sessions were conducted with varying Cyclical Learn Rate.\n","\n","Model Checkpoint was used but specific checkpoints were not specified. \n","\n","In our implementation, we therefore saved best model at end of each session (8-12 epochs)"]},{"cell_type":"markdown","metadata":{"id":"A6aXXOYaguZy"},"source":["**Session-specific settings:**\n","+  At the start of each training session, increment sesh_num by 1\n","+ *Note for model names*: \n","  + **Sesh 5** is model trained without ImgAug (Tfa implementation of Triangular 2)\n","  + **Sesh 6** is testing from-scratch Triangular2LR\n","  + **Sesh 7** is FULL RUN without ImgAug (Finished Cycle 1 only)\n","  + **Sesh 8** is FULL Run with ImgAug\n","  + **Sesh 9** is 1 cycle (12 epochs) without ImgAug to generate quick non-augmented baseline training history"]},{"cell_type":"code","metadata":{"id":"p41ny4PJ73V0"},"source":["# ***** NOTE: Change accordingly for GCP/Colab *****\n","# If using google drive:\n","model_path = './drive/MyDrive/E4040 Final Project/Models'\n","# Else if using GCP:  \n","# model_path = './Models'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MeHzkKrI197S"},"source":["# Sesssion number is used to name our models\n","sesh_num = 9\n","sesh_id = \"Sesh\" + str(sesh_num)\n","\n","# Define base epochs to be used in training. Use either 24 (paper), or 12(modified)\n","epochs = 12\n","\n","# print(sesh_id, epochs)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KZlYso6y2LWP"},"source":["Cycle 1 Training: \n","Params: \n","  + Base_lr: 6e-04\n","  + Max_lr: 6e-04\n","  + Epoch step size: 6\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LbKBjJhM2M_p","executionInfo":{"elapsed":799,"status":"ok","timestamp":1608390316128,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"bd32487f-cb3d-43e5-bddf-06e2794e27aa"},"source":["# Defined initial hyperparams per paper: Adam optimizer, with lr=1e-4 and eps=1e-8\n","\n","# Triangular2 Cyclical Learning Rate method\n","# Original paper: https://arxiv.org/pdf/1506.01186.pdf\n","\n","# \"Settings usedwere a minimum learning rate of 0.001 and a maximum of 0.006\"\n","# \"Experiments show that it is often good to set stepsize equal to 2-10 times number of iterations in an epoch\"\n","\n","# Define params for Cyclical Learn Rate callback function\n","num_train_examples = train_generator.n\n","num_iterations = int(num_train_examples/BatchSize)\n","# Based on the paper recommendations, we will set CyclicalLR rate to the following: [6,6,4,2,2,2]\n","stepSize = 6.*num_iterations\n","\n","print(\"Num_iter is: \", num_iterations, \", step size is: \", stepSize)\n","\n","# From-scratch Triangular2 LR. \n","# Sources: https://www.tensorflow.org/guide/keras/custom_callback, https://arxiv.org/pdf/1506.01186.pdf\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-4, \n","                                         max_lr=6e-4, \n","                                         stepSize=stepSize)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Num_iter is:  781 , step size is:  4686.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3opR3rRE2KkV"},"source":["filepath = model_path + '/Network2_NoAugmentation_' + sesh_id + '_cycle1.hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2o02iE9w47qh","executionInfo":{"elapsed":8849620,"status":"ok","timestamp":1608310655235,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"531ab5b0-890e-4339-afdc-ad26dae62bfd"},"source":["# Fit model. Due to constraints, test with only 5 epochs per fit call.\n","# model.fit(train_generator, epochs = 5, steps_per_epoch = )\n","model2.compile(loss='categorical_crossentropy',\n","              optimizer=keras.optimizers.Adam(learning_rate=1e-4, epsilon=1e-8),\n","              metrics=['accuracy'])\n","history = model2.fit(x = train_generator,\n","                    epochs=epochs,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    # validation_batch_size=BatchSize,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/12\n","Current epoch is:  0\n","781/781 [==============================] - 751s 952ms/step - loss: 5.6577 - accuracy: 0.0473 - val_loss: 5.1572 - val_accuracy: 0.0894\n","Epoch 2/12\n","Current epoch is:  1\n","781/781 [==============================] - 735s 941ms/step - loss: 4.8079 - accuracy: 0.1293 - val_loss: 4.4295 - val_accuracy: 0.1566\n","Epoch 3/12\n","Current epoch is:  2\n","781/781 [==============================] - 718s 919ms/step - loss: 4.3371 - accuracy: 0.1811 - val_loss: 4.2535 - val_accuracy: 0.1903\n","Epoch 4/12\n","Current epoch is:  3\n","781/781 [==============================] - 737s 944ms/step - loss: 4.0332 - accuracy: 0.2207 - val_loss: 4.0406 - val_accuracy: 0.2234\n","Epoch 5/12\n","Current epoch is:  4\n","781/781 [==============================] - 737s 943ms/step - loss: 3.8473 - accuracy: 0.2488 - val_loss: 4.1428 - val_accuracy: 0.1938\n","Epoch 6/12\n","Current epoch is:  5\n","781/781 [==============================] - 735s 942ms/step - loss: 3.7536 - accuracy: 0.2645 - val_loss: 4.2851 - val_accuracy: 0.2096\n","Epoch 7/12\n","Current epoch is:  6\n","781/781 [==============================] - 744s 952ms/step - loss: 3.6465 - accuracy: 0.2898 - val_loss: 3.9647 - val_accuracy: 0.2557\n","Epoch 8/12\n","Current epoch is:  7\n","781/781 [==============================] - 732s 937ms/step - loss: 3.4943 - accuracy: 0.3215 - val_loss: 3.2770 - val_accuracy: 0.3573\n","Epoch 9/12\n","Current epoch is:  8\n","781/781 [==============================] - 745s 953ms/step - loss: 3.3292 - accuracy: 0.3534 - val_loss: 3.2740 - val_accuracy: 0.3476\n","Epoch 10/12\n","Current epoch is:  9\n","781/781 [==============================] - 746s 956ms/step - loss: 3.1528 - accuracy: 0.3857 - val_loss: 2.9919 - val_accuracy: 0.4062\n","Epoch 11/12\n","Current epoch is:  10\n","781/781 [==============================] - 731s 935ms/step - loss: 2.9587 - accuracy: 0.4221 - val_loss: 2.8990 - val_accuracy: 0.4212\n","Epoch 12/12\n","Current epoch is:  11\n","781/781 [==============================] - 720s 921ms/step - loss: 2.7528 - accuracy: 0.4598 - val_loss: 2.4901 - val_accuracy: 0.5072\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iMYjKOh42UKw"},"source":["Cycle 2 Training: \n","Params: \n","  + Base_lr: 1e-05\n","  + Max_lr: 6e-05\n","  + Epoch step size: 6\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fmu16afI2Tbw","executionInfo":{"elapsed":8898270,"status":"ok","timestamp":1608319754479,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"fb3e0d7f-3eb7-48d3-fd2c-f98461ccfc10"},"source":["\n","# Epoch step size\n","stepSize = 6.*num_iterations\n","# Initialize cycle Triangular2LR callback\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-5, \n","                                         max_lr=6e-5, \n","                                         stepSize=stepSize)\n","filepath = './drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle2.hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Load in cycle_1 model\n","model2_cycle2 = keras.models.load_model('./drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle1.hdf5')\n","history_cycle2 = model2_cycle2.fit(x = train_generator,\n","                    epochs=epochs,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/12\n","Current epoch is:  0\n","781/781 [==============================] - 732s 935ms/step - loss: 2.4972 - accuracy: 0.5133 - val_loss: 2.2733 - val_accuracy: 0.5523\n","Epoch 2/12\n","Current epoch is:  1\n","781/781 [==============================] - 746s 955ms/step - loss: 2.4484 - accuracy: 0.5225 - val_loss: 2.2659 - val_accuracy: 0.5495\n","Epoch 3/12\n","Current epoch is:  2\n","781/781 [==============================] - 744s 953ms/step - loss: 2.4148 - accuracy: 0.5267 - val_loss: 2.2500 - val_accuracy: 0.5558\n","Epoch 4/12\n","Current epoch is:  3\n","781/781 [==============================] - 746s 955ms/step - loss: 2.3947 - accuracy: 0.5311 - val_loss: 2.2387 - val_accuracy: 0.5521\n","Epoch 5/12\n","Current epoch is:  4\n","781/781 [==============================] - 736s 942ms/step - loss: 2.3616 - accuracy: 0.5355 - val_loss: 2.2413 - val_accuracy: 0.5576\n","Epoch 6/12\n","Current epoch is:  5\n","781/781 [==============================] - 731s 935ms/step - loss: 2.3344 - accuracy: 0.5391 - val_loss: 2.2949 - val_accuracy: 0.5420\n","Epoch 7/12\n","Current epoch is:  6\n","781/781 [==============================] - 728s 932ms/step - loss: 2.2926 - accuracy: 0.5474 - val_loss: 2.2312 - val_accuracy: 0.5541\n","Epoch 8/12\n","Current epoch is:  7\n","781/781 [==============================] - 731s 936ms/step - loss: 2.2369 - accuracy: 0.5581 - val_loss: 2.1711 - val_accuracy: 0.5678\n","Epoch 9/12\n","Current epoch is:  8\n","781/781 [==============================] - 744s 952ms/step - loss: 2.1730 - accuracy: 0.5735 - val_loss: 2.1862 - val_accuracy: 0.5678\n","Epoch 10/12\n","Current epoch is:  9\n","781/781 [==============================] - 746s 955ms/step - loss: 2.1180 - accuracy: 0.5851 - val_loss: 2.1065 - val_accuracy: 0.5799\n","Epoch 11/12\n","Current epoch is:  10\n","781/781 [==============================] - 745s 954ms/step - loss: 2.0708 - accuracy: 0.5965 - val_loss: 2.1028 - val_accuracy: 0.5854\n","Epoch 12/12\n","Current epoch is:  11\n","781/781 [==============================] - 744s 953ms/step - loss: 2.0179 - accuracy: 0.6105 - val_loss: 2.0597 - val_accuracy: 0.5940\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fTmjQGY32XWc"},"source":["Cycle 3 Training: \n","Params: \n","  + Base_lr: 1e-05\n","  + Max_lr: 6e-05\n","  + Epoch step size: 4\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h_cUU5HN2YDC","executionInfo":{"elapsed":8766544,"status":"ok","timestamp":1608328664931,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"b26e50f9-a5e7-44cd-cb90-f12eb30fd6a7"},"source":["# Epoch step size\n","stepSize = 4.*num_iterations\n","# Re-initialize cycle Triangular2LR callback\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-5, \n","                                         max_lr=6e-5, \n","                                         stepSize=stepSize)\n","filepath = './drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle3.hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Load in cycle_1 model\n","model2_cycle2 = keras.models.load_model('./drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle2.hdf5')\n","history_cycle2 = model2_cycle2.fit(x = train_generator,\n","                    epochs=epochs,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/12\n","Current epoch is:  0\n","781/781 [==============================] - 738s 943ms/step - loss: 2.0026 - accuracy: 0.6142 - val_loss: 2.0837 - val_accuracy: 0.5901\n","Epoch 2/12\n","Current epoch is:  1\n","781/781 [==============================] - 731s 936ms/step - loss: 2.0214 - accuracy: 0.6085 - val_loss: 2.1399 - val_accuracy: 0.5786\n","Epoch 3/12\n","Current epoch is:  2\n","781/781 [==============================] - 742s 949ms/step - loss: 2.0324 - accuracy: 0.6027 - val_loss: 2.1889 - val_accuracy: 0.5667\n","Epoch 4/12\n","Current epoch is:  3\n","781/781 [==============================] - 741s 949ms/step - loss: 2.0533 - accuracy: 0.5976 - val_loss: 2.2082 - val_accuracy: 0.5628\n","Epoch 5/12\n","Current epoch is:  4\n","781/781 [==============================] - 745s 953ms/step - loss: 2.0254 - accuracy: 0.6047 - val_loss: 2.1920 - val_accuracy: 0.5579\n","Epoch 6/12\n","Current epoch is:  5\n","781/781 [==============================] - 737s 944ms/step - loss: 1.9570 - accuracy: 0.6233 - val_loss: 2.1794 - val_accuracy: 0.5711\n","Epoch 7/12\n","Current epoch is:  6\n","781/781 [==============================] - 723s 926ms/step - loss: 1.8931 - accuracy: 0.6393 - val_loss: 2.0536 - val_accuracy: 0.5923\n","Epoch 8/12\n","Current epoch is:  7\n","781/781 [==============================] - 739s 945ms/step - loss: 1.8265 - accuracy: 0.6567 - val_loss: 2.0101 - val_accuracy: 0.6042\n","Epoch 9/12\n","Current epoch is:  8\n","781/781 [==============================] - 742s 950ms/step - loss: 1.7939 - accuracy: 0.6661 - val_loss: 2.0654 - val_accuracy: 0.5977\n","Epoch 10/12\n","Current epoch is:  9\n","781/781 [==============================] - 701s 898ms/step - loss: 1.7916 - accuracy: 0.6650 - val_loss: 2.0650 - val_accuracy: 0.5941\n","Epoch 11/12\n","Current epoch is:  10\n","781/781 [==============================] - 688s 881ms/step - loss: 1.8006 - accuracy: 0.6618 - val_loss: 2.1366 - val_accuracy: 0.5755\n","Epoch 12/12\n","Current epoch is:  11\n","781/781 [==============================] - 720s 921ms/step - loss: 1.8022 - accuracy: 0.6606 - val_loss: 2.2202 - val_accuracy: 0.5663\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PGZUJAe02d24"},"source":["Cycle 4 Training: \n","Params: \n","  + Base_lr: 6e-06\n","  + Max_lr: 6e-06\n","  + Epoch step size: 2\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8mb2X-D82dKr","executionInfo":{"elapsed":4439860,"status":"ok","timestamp":1608333521806,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"4c5bdef7-db88-4ce7-c02a-fb0ddc8496de"},"source":["# Epoch step size\n","stepSize = 2.*num_iterations\n","# Re-initialize cycle Triangular2LR callback\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-6, \n","                                         max_lr=6e-6, \n","                                         stepSize=stepSize)\n","filepath = './drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle4.hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Load in cycle_1 model\n","model2_cycle2 = keras.models.load_model('./drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle3.hdf5')\n","history_cycle2 = model2_cycle2.fit(x = train_generator,\n","                    epochs=epochs//2,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/6\n","Current epoch is:  0\n","781/781 [==============================] - 740s 945ms/step - loss: 1.7748 - accuracy: 0.6704 - val_loss: 1.9849 - val_accuracy: 0.6100\n","Epoch 2/6\n","Current epoch is:  1\n","781/781 [==============================] - 741s 949ms/step - loss: 1.7672 - accuracy: 0.6737 - val_loss: 1.9902 - val_accuracy: 0.6065\n","Epoch 3/6\n","Current epoch is:  2\n","781/781 [==============================] - 738s 945ms/step - loss: 1.7545 - accuracy: 0.6763 - val_loss: 1.9864 - val_accuracy: 0.6078\n","Epoch 4/6\n","Current epoch is:  3\n","781/781 [==============================] - 728s 932ms/step - loss: 1.7434 - accuracy: 0.6798 - val_loss: 1.9786 - val_accuracy: 0.6092\n","Epoch 5/6\n","Current epoch is:  4\n","781/781 [==============================] - 731s 936ms/step - loss: 1.7338 - accuracy: 0.6814 - val_loss: 1.9799 - val_accuracy: 0.6100\n","Epoch 6/6\n","Current epoch is:  5\n","781/781 [==============================] - 745s 953ms/step - loss: 1.7400 - accuracy: 0.6798 - val_loss: 1.9800 - val_accuracy: 0.6093\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rZQbWzQC2gc2"},"source":["Cycle 5 Training: \n","Params: \n","  + Base_lr: 6e-05\n","  + Max_lr: 6e-05\n","  + Epoch step size: 2\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hVYDv47F2hss","executionInfo":{"elapsed":4215925,"status":"ok","timestamp":1608337979132,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"c0849477-9ff8-4fc7-f373-013015ed1455"},"source":["# Epoch step size\n","stepSize = 2.*num_iterations\n","# Re-initialize cycle Triangular2LR callback\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-5, \n","                                         max_lr=6e-5, \n","                                         stepSize=stepSize)\n","filepath = './drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle5.hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Load in cycle_1 model\n","model2_cycle2 = keras.models.load_model('./drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle4.hdf5')\n","history_cycle2 = model2_cycle2.fit(x = train_generator,\n","                    epochs=epochs//2,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/6\n","Current epoch is:  0\n","781/781 [==============================] - 746s 953ms/step - loss: 1.8094 - accuracy: 0.6612 - val_loss: 2.1175 - val_accuracy: 0.5826\n","Epoch 2/6\n","Current epoch is:  1\n","781/781 [==============================] - 718s 919ms/step - loss: 1.8861 - accuracy: 0.6370 - val_loss: 2.3826 - val_accuracy: 0.5323\n","Epoch 3/6\n","Current epoch is:  2\n","781/781 [==============================] - 681s 872ms/step - loss: 1.8796 - accuracy: 0.6370 - val_loss: 2.1135 - val_accuracy: 0.5850\n","Epoch 4/6\n","Current epoch is:  3\n","781/781 [==============================] - 678s 868ms/step - loss: 1.7622 - accuracy: 0.6714 - val_loss: 2.0061 - val_accuracy: 0.6051\n","Epoch 5/6\n","Current epoch is:  4\n","781/781 [==============================] - 676s 865ms/step - loss: 1.7194 - accuracy: 0.6839 - val_loss: 2.0732 - val_accuracy: 0.5948\n","Epoch 6/6\n","Current epoch is:  5\n","781/781 [==============================] - 699s 895ms/step - loss: 1.7404 - accuracy: 0.6772 - val_loss: 2.1738 - val_accuracy: 0.5714\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3Gga-weO2kGq"},"source":["Cycle 6 Training: \n","Params: \n","  + Base_lr: 6e-07\n","  + Max_lr: 6e-07\n","  + Epoch step size: 2\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hHxJ6puy2mhq","executionInfo":{"elapsed":4302450,"status":"ok","timestamp":1608344622440,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"cc17e60b-b273-441a-bbf9-b2cc8e104d6f"},"source":["# Epoch step size\n","stepSize = 2.*num_iterations\n","# Re-initialize cycle Triangular2LR callback\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-7, \n","                                         max_lr=6e-7, \n","                                         stepSize=stepSize)\n","filepath = './drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle6(final).hdf5' # <- h5 won't sace. Use hdf5 instead\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Load in cycle_1 model\n","model2_cycle2 = keras.models.load_model('./drive/MyDrive/E4040 Final Project/Models/Network2_NoAugmentation_' + sesh_id + '_cycle5.hdf5')\n","history_cycle2 = model2_cycle2.fit(x = train_generator,\n","                    epochs=epochs//2,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/6\n","Current epoch is:  0\n","781/781 [==============================] - 721s 921ms/step - loss: 1.6939 - accuracy: 0.6914 - val_loss: 1.9814 - val_accuracy: 0.6094\n","Epoch 2/6\n","Current epoch is:  1\n","781/781 [==============================] - 739s 947ms/step - loss: 1.6905 - accuracy: 0.6918 - val_loss: 1.9784 - val_accuracy: 0.6132\n","Epoch 3/6\n","Current epoch is:  2\n","781/781 [==============================] - 717s 917ms/step - loss: 1.6818 - accuracy: 0.6934 - val_loss: 1.9753 - val_accuracy: 0.6135\n","Epoch 4/6\n","Current epoch is:  3\n","781/781 [==============================] - 693s 887ms/step - loss: 1.6915 - accuracy: 0.6924 - val_loss: 1.9763 - val_accuracy: 0.6138\n","Epoch 5/6\n","Current epoch is:  4\n","781/781 [==============================] - 701s 897ms/step - loss: 1.6806 - accuracy: 0.6955 - val_loss: 1.9750 - val_accuracy: 0.6133\n","Epoch 6/6\n","Current epoch is:  5\n","781/781 [==============================] - 723s 926ms/step - loss: 1.6805 - accuracy: 0.6933 - val_loss: 1.9763 - val_accuracy: 0.6129\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"QupsqP3H2m85","executionInfo":{"elapsed":835,"status":"ok","timestamp":1608333666987,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"},"user_tz":300},"outputId":"cc3106b9-850e-4565-b0c0-a578c98f7f10"},"source":[""],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"J5sxMPpSK9k1","executionInfo":{"status":"ok","timestamp":1608410432865,"user_tz":300,"elapsed":639,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"4a515bb9-e83c-460e-e297-1d6380bd0775"},"source":["from matplotlib import pyplot as plt\n","import numpy as np\n","# Saved hdf5 files do not store loss... Have to manually input and plot graphs.\n","hist_epochs = np.arange(54)\n","# Manual input of train and val loss over epochs (Proof of results in img attached)\n","hist_train_loss = [5.6577, 4.8079, 4.3371, 4.0332, 3.8473, 3.7536, 3.6465, 3.4943, 3.3292, 3.1528, 2.9587, 2.7528, \n","                   2.4972, 2.4484, 2.4148, 2.3947, 2.3616, 2.3344, 2.2926, 2.2369, 2.1730, 2.1180, 2.0708, 2.0179,\n","                   2.0026, 2.0214, 2.0324, 2.0533, 2.0254, 1.9570, 1.8931, 1.8265, 1.7939, 1.7916, 1.8006, 1.8022,\n","                   1.7748, 1.7672, 1.7545, 1.7434, 1.7338, 1.7400,\n","                   1.8094, 1.8861, 1.8796, 1.7622, 1.7194, 1.7404,\n","                   1.6939, 1.6905, 1.6818, 1.6815, 1.6806, 1.6805]\n","\n","hist_val_loss = [5.1572, 4.4295, 4.2535, 4.0406, 4.1428, 4.2851, 3.9647, 3.2770, 3.2740, 2.9919, 2.899, 2.4901,\n","                 2.2733, 2.2659, 2.2500, 2.2387, 2.2413, 2.2949, 2.2312, 2.1711, 2.1862, 2.1065, 2.1028, 2.0597,\n","                 2.0837, 2.1399, 2.1889, 2.2082, 2.1920, 2.1794, 2.0536, 2.0101, 2.0654, 2.0650, 2.1366, 2.2202,\n","                 1.9849, 1.9902, 1.9864, 1.9786, 1.9799, 1.9800,\n","                 2.1175, 2.3826, 2.1135, 2.0061, 2.0732, 2.1738,\n","                 1.9814, 1.9784, 1.9753, 1.9763, 1.9750, 1.9763]\n","\n","\n","hist_train_acc = [0.0473, 0.1293, 0.1811, 0.2207, 0.2488, 0.2645, 0.2898, 0.3215, 0.3534, 0.3857, 0.4221, 0.4598,\n","                  0.5133, 0.5225, 0.5267, 0.5311, 0.5355, 0.5391, 0.5474, 0.5581, 0.5735, 0.5851, 0.5965, 0.6105,\n","                  0.6142, 0.6085, 0.6027, 0.5976, 0.6047, 0.6233, 0.6393, 0.6567, 0.6661, 0.6650, 0.6618, 0.6606,\n","                  0.6704, 0.6737, 0.6763, 0.6798, 0.6814, 0.6798,\n","                  0.6612, 0.6370, 0.6370, 0.6714, 0.6839, 0.6772, \n","                  0.6914, 0.6918, 0.6934, 0.6924, 0.6955, 0.6933]\n","\n","hist_val_acc = [0.0894, 0.1566, 0.1903, 0.2234, 0.1938, 0.2096, 0.2557, 0.3573, 0.3476, 0.4062, 0.4212, 0.5072,\n","               0.5523, 0.5495, 0.5558, 0.5521, 0.5576, 0.5420, 0.5541, 0.5678, 0.5678, 0.5799, 0.5854, 0.5940,\n","               0.5901, 0.5786, 0.5667, 0.5628, 0.5579, 0.5711, 0.5923, 0.6042, 0.5977, 0.5941, 0.5755, 0.5663, \n","               0.6100, 0.6065, 0.6078, 0.6092, 0.6100, 0.6093,\n","               0.5826, 0.5323, 0.5850, 0.6051, 0.5948, 0.5714,\n","               0.6094, 0.6132, 0.6135, 0.6138, 0.6133, 0.6129]\n","\n","# print(max_val_acc)\n","plt.plot(hist_train_loss)\n","plt.plot(hist_val_loss)\n","plt.title('Network 2 loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"gWEQUl5xWBmD","executionInfo":{"status":"ok","timestamp":1608410434718,"user_tz":300,"elapsed":607,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"e62d8749-d348-4d97-b85e-bd4b80205bee"},"source":["plt.plot(hist_train_acc)\n","plt.plot(hist_val_acc)\n","plt.title('Network 2 accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()\n","print(\"Maximum validation accuracy achieved was: \", max(hist_val_acc))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Maximum validation accuracy achieved was:  0.6138\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h3NpXR52gek1","executionInfo":{"status":"ok","timestamp":1608410294576,"user_tz":300,"elapsed":2163702,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"9f92212a-e62d-4f2e-d15c-e637256dfbf4"},"source":["# Code for training Session 9: \n","num_train_examples = train_generator.n\n","num_iterations = int(num_train_examples/BatchSize)\n","\n","stepSize = 6.*num_iterations\n","CyclicalLearnRate = TriangularCyclicalLR(min_lr = 1e-4, \n","                                         max_lr=6e-4, \n","                                         stepSize=stepSize)\n","# Test filepath:\n","filepath = model_path + '/Network2_NoAugmentation_' + sesh_id + '_cycle1.hdf5'\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=filepath,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)\n","# Compile\n","model2.compile(loss='categorical_crossentropy',\n","              optimizer=keras.optimizers.Adam(learning_rate=1e-4, epsilon=1e-8),\n","              metrics=['accuracy'])\n","# Call fit\n","history = model2.fit(x = train_generator,\n","                    epochs=epochs,\n","                    steps_per_epoch= train_generator.n // BatchSize,\n","                    validation_steps = validation_generator.n //BatchSize,\n","                    validation_data=validation_generator,\n","                    # validation_batch_size=BatchSize,\n","                    callbacks=[model_checkpoint_callback, CyclicalLearnRate])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/12\n","Current epoch is:  0\n","  6/781 [..............................] - ETA: 2:50 - loss: 6.5375 - accuracy: 0.0075WARNING:tensorflow:Callback method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0812s vs `on_train_batch_end` time: 0.1131s). Check your callbacks.\n","781/781 [==============================] - 186s 228ms/step - loss: 5.3096 - accuracy: 0.0871 - val_loss: 4.5393 - val_accuracy: 0.1633\n","Epoch 2/12\n","Current epoch is:  1\n","781/781 [==============================] - 177s 226ms/step - loss: 4.0916 - accuracy: 0.2350 - val_loss: 4.0870 - val_accuracy: 0.2261\n","Epoch 3/12\n","Current epoch is:  2\n","781/781 [==============================] - 177s 226ms/step - loss: 3.5420 - accuracy: 0.3207 - val_loss: 4.0354 - val_accuracy: 0.2319\n","Epoch 4/12\n","Current epoch is:  3\n","781/781 [==============================] - 177s 226ms/step - loss: 3.1961 - accuracy: 0.3785 - val_loss: 3.9250 - val_accuracy: 0.2574\n","Epoch 5/12\n","Current epoch is:  4\n","781/781 [==============================] - 177s 226ms/step - loss: 2.9800 - accuracy: 0.4209 - val_loss: 3.8952 - val_accuracy: 0.2951\n","Epoch 6/12\n","Current epoch is:  5\n","781/781 [==============================] - 176s 226ms/step - loss: 2.8639 - accuracy: 0.4478 - val_loss: 3.4571 - val_accuracy: 0.3396\n","Epoch 7/12\n","Current epoch is:  6\n","781/781 [==============================] - 177s 226ms/step - loss: 2.7499 - accuracy: 0.4793 - val_loss: 3.3378 - val_accuracy: 0.3716\n","Epoch 8/12\n","Current epoch is:  7\n","781/781 [==============================] - 177s 226ms/step - loss: 2.5423 - accuracy: 0.5262 - val_loss: 3.0804 - val_accuracy: 0.4220\n","Epoch 9/12\n","Current epoch is:  8\n","781/781 [==============================] - 176s 226ms/step - loss: 2.3385 - accuracy: 0.5731 - val_loss: 3.0050 - val_accuracy: 0.4413\n","Epoch 10/12\n","Current epoch is:  9\n","781/781 [==============================] - 177s 226ms/step - loss: 2.1056 - accuracy: 0.6263 - val_loss: 2.8673 - val_accuracy: 0.4633\n","Epoch 11/12\n","Current epoch is:  10\n","781/781 [==============================] - 177s 227ms/step - loss: 1.8251 - accuracy: 0.6891 - val_loss: 2.6629 - val_accuracy: 0.5029\n","Epoch 12/12\n","Current epoch is:  11\n","781/781 [==============================] - 177s 226ms/step - loss: 1.5174 - accuracy: 0.7641 - val_loss: 2.4425 - val_accuracy: 0.5488\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PBeUABZvlOm9","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1608412276418,"user_tz":300,"elapsed":858,"user":{"displayName":"Phan Anh Nguyen","photoUrl":"","userId":"14762634778281438018"}},"outputId":"92e7ca4d-8ad5-45b3-ba85-026ee528d8a1"},"source":["# Generate graphs for loss over epoch.\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Network2 (No augmentation) accuracy')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}